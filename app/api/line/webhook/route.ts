export const runtime = "nodejs";

import crypto from "crypto";
import { sql } from "../../../../lib/db";

// healthcheck / verify
export async function GET() { return new Response("ok", { status: 200 }); }
export async function HEAD() { return new Response(null, { status: 200 }); }

export async function POST(req: Request) {
  const raw = Buffer.from(await req.arrayBuffer());
  const sig = req.headers.get("x-line-signature") ?? "";
  const h = crypto.createHmac("sha256", process.env.LINE_CHANNEL_SECRET!);
  h.update(raw);
  if (sig !== h.digest("base64")) return new Response("bad signature", { status: 400 });

  const { events } = JSON.parse(raw.toString("utf8") || "{}");

  for (const ev of events ?? []) {
    if (ev.type !== "message" || ev.message?.type !== "text") continue;
    if (ev.source?.type !== "group") continue;

    const groupId: string = ev.source.groupId;
    const text = (ev.message.text as string).trim();

    // ---- help ----
    if (/^(help|‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠)$/i.test(text)) {
      await reply(ev.replyToken, { type: "text", text: helpText(groupId) });
      continue;
    }

    // ---- add <title> | desc=... | due=YYYY-MM-DD ----
    if (/^add\s+/i.test(text) || /^‡πÄ‡∏û‡∏¥‡πà‡∏°\s+/i.test(text)) {
      try {
        const m = text
          .replace(/^(add|‡πÄ‡∏û‡∏¥‡πà‡∏°)\s+/i, "")
          .match(/^(.*?)(?:\s*\|\s*desc=(.*?))?(?:\s*\|\s*due=(\d{4}-\d{2}-\d{2}))?\s*$/);

        if (!m) {
          await reply(ev.replyToken, { type: "text",
            text: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\nadd ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô | desc=‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | due=2025-09-01" });
          return;
        }

        const title = (m[1] || "").trim();
        const desc  = m[2]?.trim() || null;
        const due   = m[3]?.trim() || null;

        if (!title) {
          await reply(ev.replyToken, { type: "text",
            text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:\nadd ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ | desc=‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° | due=2025-09-01" });
          return;
        }

        // ensure group exists
        await sql/* sql */`
          insert into public.groups(id) values (${groupId})
          on conflict (id) do nothing`;

        // due at 00:00 Asia/Bangkok -> ISO
        const dueIso = due ? new Date(`${due}T00:00:00+07:00`).toISOString() : null;

        // generate 4-digit code unique per group (retry on conflict)
        const genCode4 = () => Math.floor(Math.random() * 10000).toString().padStart(4, "0");

        let code = genCode4();
        let created: any[] = [];
        for (let i = 0; i < 25; i++) {
          try {
            created = await sql/* sql */`
              insert into public.tasks (group_id, code, title, description, due_at)
              values (${groupId}, ${code}, ${title}, ${desc}, ${dueIso})
              returning code, title, due_at`;
            break;
          } catch (e: any) {
            const msg = String(e?.message ?? e);
            if (msg.includes("tasks_group_code_uq") || msg.includes("duplicate key value")) {
              code = genCode4(); // retry new code
              continue;
            }
            throw e;
          }
        }
        if (!created.length) throw new Error("Cannot allocate 4-digit code");

        const r = created[0];
        await reply(ev.replyToken, {
          type: "text",
          text: `üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‚Ä¢ CODE: ${r.code}\n‚Ä¢ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${r.title}${r.due_at ? `\n‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${fmtDate(r.due_at)}` : ""}`
        });
      } catch (e: any) {
        console.error("ADD_ERR", e);
        await reply(ev.replyToken, { type: "text",
          text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" });
      }
      continue;
    }

    // ---- list / list today ----
    if (/^list(\s+today)?$/i.test(text) || /^‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/i.test(text)) {
      const onlyToday = /today/i.test(text);
      const rows = onlyToday
        ? await sql/* sql */`
            select code, title, status, due_at, progress
            from public.tasks
            where group_id=${groupId}
              and date(timezone('Asia/Bangkok', due_at)) = date(timezone('Asia/Bangkok', now()))
            order by coalesce(due_at, now()+interval '10 years') asc
            limit 50`
        : await sql/* sql */`
            select code, title, status, due_at, progress
            from public.tasks
            where group_id=${groupId}
            order by coalesce(due_at, now()+interval '10 years') asc
            limit 50`;

      if (!rows.length) {
        await reply(ev.replyToken, { type: "text", text: onlyToday ? "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏±‡∏ö" });
        continue;
      }

      const body = rows.map((r: any, i: number) =>
        `${i + 1}. [${r.status ?? "todo"}] ${r.title}` +
        (r.due_at ? `  (due: ${fmtDate(r.due_at)})` : "") +
        `\n   code=${r.code}  progress=${r.progress ?? 0}%`
      ).join("\n");

      await reply(ev.replyToken, {
        type: "text",
        text: `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô${onlyToday ? " (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)" : ""}\n` + body
      });
      continue;
    }

// ---- progress <code> <‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠ +10/-5> ----
if (text.toLowerCase().startsWith("progress ") || text.toLowerCase().startsWith("update ")
    || text.startsWith("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ")) {
  try {
    const parts = text.trim().split(/\s+/);           // ["progress","5532","+20"]
    const key   = parts[1];                            // code 4 ‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ UUID
    let val     = (parts[2] || "").replace(/%$/, "");  // ‡∏ï‡∏±‡∏î % ‡∏ó‡πâ‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

    if (!key || !val) {
      await reply(ev.replyToken, {
        type: "text",
        text: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\nprogress 1234 50\nprogress 1234 +10\nprogress 1234 -5"
      });
      continue;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ progress ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const found = await sql/* sql */`
      select id, code, progress, status
      from public.tasks
      where group_id=${groupId} and (code=${key} or id::text=${key})
      limit 1`;
    if (!found.length) {
      await reply(ev.replyToken, { type: "text", text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)" });
      continue;
    }
    const t   = found[0];
    const cur = Number(t.progress ?? 0);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    const isDelta = /^[+-]/.test(val);
    const n = parseInt(val, 10);
    let next = isDelta ? cur + n : n;
    if (Number.isNaN(next)) next = cur;
    next = Math.max(0, Math.min(100, next)); // 0..100

    const nextStatus =
      next >= 100 ? 'done'
      : (t.status === 'todo' && next > 0 ? 'in_progress' : t.status);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏±‡∏Å ‚Äî ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await sql/* sql */`
      update public.tasks
      set progress=${next},
          status=${nextStatus}::task_status,
          updated_at=now()
      where id=${t.id}`;

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    await reply(ev.replyToken, {
      type: "text",
      text: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ [${t.code}] ${cur}% ‚Üí ${next}%${next===100 ? " ‚úÖ (done)" : ""}`
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
    try {
      await sql/* sql */`
        insert into public.task_updates (task_id, actor_id, note, progress, new_status)
        values (${t.id}, ${ev.source.userId ?? null}, 'progress update via chat', ${next}, ${nextStatus}::task_status)`;
    } catch (e) {
      console.error("LOG_FAIL", e);
    }
  } catch (e:any) {
    console.error("PROGRESS_ERR", e);
    await reply(ev.replyToken, { type: "text", text: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
  continue;
}
    // ---- done <code> (also accepts UUID) ----
    if (/^done\s+/i.test(text) || /^‡πÄ‡∏™‡∏£‡πá‡∏à\s+/i.test(text)) {
      const key = text.replace(/^(done|‡πÄ‡∏™‡∏£‡πá‡∏à)\s+/i, "").trim();
      if (!key) {
        await reply(ev.replyToken, { type: "text", text: "‡∏û‡∏¥‡∏°‡∏û‡πå: done <code>\n‡πÄ‡∏ä‡πà‡∏ô: done 0123" });
        continue;
      }
      const updated = await sql/* sql */`
        update public.tasks
        set status='done', progress=100, updated_at=now()
        where group_id=${groupId}
          and (code=${key} or id::text=${key})
        returning code, title`;
      if (!updated.length) {
        await reply(ev.replyToken, { type: "text", text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)" });
        continue;
      }
      await reply(ev.replyToken, { type: "text",
        text: `‚úÖ ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${updated[0].title}\n(code=${updated[0].code})` });
      continue;
    }

    // default
    await reply(ev.replyToken, { type: "text", text: helpText() });
  }

  return new Response("ok", { status: 200 });
}

// ===== utils =====
function fmtDate(d: string | Date) {
  const dt = typeof d === "string" ? new Date(d) : d;
  return new Intl.DateTimeFormat("en-CA", {
    timeZone: "Asia/Bangkok",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  }).format(dt);
}

function helpText(gid?: string) {
  const lines = [
    "üß≠ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:",
    "‚Ä¢ add ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô | desc=‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | due=YYYY-MM-DD",
    "‚Ä¢ list ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (‡∏°‡∏µ code 4 ‡∏´‡∏•‡∏±‡∏Å)",
    "‚Ä¢ list today ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    "‚Ä¢ progress <code> <‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠ +10/-5> ‚Äî ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
    "‚Ä¢ done <code> ‚Äî ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ code 4 ‡∏´‡∏•‡∏±‡∏Å",
    "‚Ä¢ help ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  ];
  if (gid) {
    lines.push("", `üÜî GROUP_ID: ${gid}`);
  }
  return lines.join("\n");
}

async function reply(replyToken: string, message: any) {
  await fetch("https://api.line.me/v2/bot/message/reply", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ replyToken, messages: [message] }),
  });
}
