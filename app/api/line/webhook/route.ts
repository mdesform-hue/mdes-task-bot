// app/api/line/webhook/route.ts
export const runtime = "nodejs";

import crypto from "crypto";
import { google } from "googleapis";
import { sql } from "../../../../lib/db";

// ---------------------------------------------------------------------------
// TIME HELPERS (‡πÇ‡∏ã‡∏ô‡πÑ‡∏ó‡∏¢, ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ toISOString)
// ---------------------------------------------------------------------------
const TZ = "Asia/Bangkok";
const pad = (n: number) => String(n).padStart(2, "0");

// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡∏£‡∏¥‡∏á RFC3339 ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏≠‡∏≠‡∏ü‡πÄ‡∏ã‡πá‡∏ï +07:00 ‡πÄ‡∏ä‡πà‡∏ô 2025-09-19T10:00:00+07:00
function rfcBkk(y: number, m: number, d: number, hh = 0, mm = 0) {
  return `${y}-${pad(m)}-${pad(d)}T${pad(hh)}:${pad(mm)}:00+07:00`;
}

// ‡∏ö‡∏ß‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ ‡πÇ‡∏î‡∏¢‡∏¢‡∏∂‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC/ISO)
function addMinutesBkk(
  y: number,
  m: number,
  d: number,
  hh: number,
  mm: number,
  plus: number
) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á epoch ‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ñ‡∏∑‡∏≠ +07:00 (‡∏•‡∏ö 7 ‡∏ä‡∏°. ‡∏ï‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC)
  const utc = Date.UTC(y, m - 1, d, hh - 7, mm) + plus * 60_000;
  // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡πÑ‡∏ó‡∏¢ (‡∏ö‡∏ß‡∏Å 7 ‡∏ä‡∏°.)
  const t = new Date(utc + 7 * 60 * 60 * 1000);
  return {
    y: t.getUTCFullYear(),
    m: t.getUTCMonth() + 1,
    d: t.getUTCDate(),
    hh: t.getUTCHours(),
    mm: t.getUTCMinutes(),
  };
}

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
function fmtBkk(dt: string) {
  return new Intl.DateTimeFormat("th-TH", {
    timeZone: TZ,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  }).format(new Date(dt));
}

// ---------------------------------------------------------------------------
// Google Calendar (Service Account)
// ---------------------------------------------------------------------------
function getGoogleAuth() {
  const clientEmail = process.env.GOOGLE_SERVICE_EMAIL || "";
  let privateKey = process.env.GOOGLE_PRIVATE_KEY || "";
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏°‡∏µ \n) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á
  privateKey = privateKey.replace(/\\n/g, "\n");
  return new google.auth.JWT({
    email: clientEmail,
    key: privateKey,
    scopes: ["https://www.googleapis.com/auth/calendar"],
  });
}
function getCalendar() {
  return google.calendar({ version: "v3", auth: getGoogleAuth() });
}

// ---------------------------------------------------------------------------
// LINE util
// ---------------------------------------------------------------------------
async function reply(replyToken: string, message: any) {
  await fetch("https://api.line.me/v2/bot/message/reply", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ replyToken, messages: [message] }),
  });
}

function helpText(gid?: string) {
  const lines = [
    "üß≠ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:",
    "‚Ä¢ ai ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á <‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á> ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ | 27 10 ‡πÇ‡∏°‡∏á | due=YYYY-MM-DD time=HH:MM | email=a@b.com",
    "  - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà '‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á' ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô (Task) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
    "‚Ä¢ add ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô | desc=‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | due=YYYY-MM-DD",
    "‚Ä¢ list ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
    "‚Ä¢ list today ‚Äî ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    "‚Ä¢ progress <code> <‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠ +10/-5>",
    "‚Ä¢ done <code> ‚Äî ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô",
    "‚Ä¢ help ‚Äî ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  ];
  if (gid) lines.push("", `üÜî GROUP_ID: ${gid}`);
  return lines.join("\n");
}

function fmtDate(d: string | Date) {
  const dt = typeof d === "string" ? new Date(d) : d;
  return new Intl.DateTimeFormat("en-CA", {
    timeZone: TZ,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  }).format(dt);
}

// ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ matchAll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö target ‡∏ï‡πà‡∏≥)
function extractEmails(text: string): string[] {
  const picked = new Set<string>();
  const re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi;
  let m: RegExpExecArray | null;
  while ((m = re.exec(text)) !== null) {
    picked.add(m[0]);
  }
  return Array.from(picked);
}

// ---------------------------------------------------------------------------
// Healthcheck
// ---------------------------------------------------------------------------
export async function GET() {
  return new Response("ok", { status: 200 });
}
export async function HEAD() {
  return new Response(null, { status: 200 });
}

// ---------------------------------------------------------------------------
// Webhook
// ---------------------------------------------------------------------------
export async function POST(req: Request) {
  // verify LINE signature
  const raw = Buffer.from(await req.arrayBuffer());
  const sig = req.headers.get("x-line-signature") ?? "";
  const h = crypto.createHmac("sha256", process.env.LINE_CHANNEL_SECRET!);
  h.update(raw);
  if (sig !== h.digest("base64")) {
    return new Response("bad signature", { status: 400 });
  }

  const { events } = JSON.parse(raw.toString("utf8") || "{}");

  for (const ev of events ?? []) {
    if (ev.type !== "message" || ev.message?.type !== "text") continue;
    if (ev.source?.type !== "group") continue;

    const groupId: string = ev.source.groupId;
    const text = (ev.message.text as string).trim();

    // help
    if (/^(help|‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠)$/i.test(text)) {
      await reply(ev.replyToken, { type: "text", text: helpText(groupId) });
      continue;
    }

    // -----------------------------------------------------------------------
    // AI mode: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "ai" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
    // - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á" ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Calendar + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å task
    // - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á" ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å task ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:  ai ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏™‡πà‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 10 ‡πÇ‡∏°‡∏á
    //           ai ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á 27 10 ‡πÇ‡∏°‡∏á
    //           ai ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9 ‡πÇ‡∏°‡∏á
    // -----------------------------------------------------------------------
    if (/^ai\s+/i.test(text)) {
      const lower = text.toLowerCase();
      const wantCalendar = lower.includes("‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á");

      // ‡πÅ‡∏¢‡∏Å title ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢: ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "ai" ‡πÅ‡∏•‡∏∞ "‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á" ‡∏≠‡∏≠‡∏Å
      let title = text.replace(/^ai\s+/i, "");
      title = title.replace(/^‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á\s*/i, "").trim();

      // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ HH ‡πÇ‡∏°‡∏á" | "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ HH ‡πÇ‡∏°‡∏á" | "27 10 ‡πÇ‡∏°‡∏á" | due= | time=
      const now = new Date();
      // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
      const todayBkk = new Date(
        Date.UTC(
          now.getUTCFullYear(),
          now.getUTCMonth(),
          now.getUTCDate(),
          now.getUTCHours() + 7,
          now.getUTCMinutes()
        )
      );
      let y = todayBkk.getUTCFullYear();
      let m = todayBkk.getUTCMonth() + 1;
      let d = todayBkk.getUTCDate();
      let hh = 9;
      let mm = 0;

      // parse due=YYYY-MM-DD
      const dueMatch = text.match(/\bdue=(\d{4})-(\d{2})-(\d{2})\b/i);
      if (dueMatch) {
        y = parseInt(dueMatch[1], 10);
        m = parseInt(dueMatch[2], 10);
        d = parseInt(dueMatch[3], 10);
      }

      // parse time=HH:MM
      const timeMatch = text.match(/\btime=(\d{1,2}):(\d{2})\b/i);
      if (timeMatch) {
        hh = parseInt(timeMatch[1], 10);
        mm = parseInt(timeMatch[2], 10);
      }

      // "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 10 ‡πÇ‡∏°‡∏á" | "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ 14 ‡πÇ‡∏°‡∏á"
      const rxDayHour = /(‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)\s*(\d{1,2})\s*‡πÇ‡∏°‡∏á/;
      const dh = text.match(rxDayHour);
      if (dh) {
        const word = dh[1];
        const hour = parseInt(dh[2], 10);
        if (word === "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ") {
          // +1 ‡∏ß‡∏±‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
          const add1 = addMinutesBkk(y, m, d, 0, 0, 24 * 60);
          y = add1.y;
          m = add1.m;
          d = add1.d;
        }
        hh = hour;
        mm = 0;
      }

      // "27 10 ‡πÇ‡∏°‡∏á" (27 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
      const rxDomHour = /\b(\d{1,2})\s+(\d{1,2})\s*‡πÇ‡∏°‡∏á/;
      const dm = text.match(rxDomHour);
      if (dm) {
        d = parseInt(dm[1], 10);
        hh = parseInt(dm[2], 10);
        // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‚Üí ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      }

      // ‡∏ñ‡πâ‡∏≤ title ‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡πÉ‡∏´‡πâ fallback
      if (!title || /^‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á$/i.test(title)) title = "‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà";

      // ‡∏î‡∏∂‡∏á emails (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      const emails = extractEmails(text);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÄ‡∏™‡∏°‡∏≠ (AI ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô DB)
      try {
        await sql/* sql */`
          insert into public.groups(id) values(${groupId})
          on conflict (id) do nothing`;
        // ‡∏™‡∏∏‡πà‡∏° code 4 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö unique ‡∏ï‡πà‡∏≠ group
        const gen4 = () =>
          Math.floor(Math.random() * 10000).toString().padStart(4, "0");
        let code = gen4();
        let created: any[] = [];
        for (let i = 0; i < 25; i++) {
          try {
            created = await sql/* sql */`
              insert into public.tasks(group_id, code, title, description, due_at)
              values (${groupId}, ${code}, ${title}, null, ${
              rfcBkk(y, m, d, hh, mm)
            })
              returning id, code, title, due_at`;
            break;
          } catch (e: any) {
            const msg = String(e?.message ?? e);
            if (msg.includes("duplicate key")) {
              code = gen4();
              continue;
            }
            throw e;
          }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠ "‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á" ‚Üí ‡∏¢‡∏¥‡∏á Google Calendar ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
        if (wantCalendar) {
          const startStr = rfcBkk(y, m, d, hh, mm);
          const duration =
            Number(process.env.DEFAULT_EVENT_DURATION_MIN ?? "60") || 60;
          const endParts = addMinutesBkk(y, m, d, hh, mm, duration);
          const endStr = rfcBkk(
            endParts.y,
            endParts.m,
            endParts.d,
            endParts.hh,
            endParts.mm
          );

          try {
            const calendar = getCalendar();
            await calendar.events.insert({
              calendarId: "primary", // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ SA ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ Service Account
              requestBody: {
                summary: title,
                start: { dateTime: startStr, timeZone: TZ },
                end: { dateTime: endStr, timeZone: TZ },
                attendees: emails.map((e) => ({ email: e })),
              },
            });

            await reply(ev.replyToken, {
              type: "text",
              text:
                "üìÖ ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß\n" +
                `‚Ä¢ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${title}\n` +
                `‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${fmtBkk(startStr)} - ${fmtBkk(endStr)}`,
            });
          } catch (e: any) {
            console.error("CALENDAR_ERR", e);
            await reply(ev.replyToken, {
              type: "text",
              text:
                "‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏•‡∏á Calendar ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n" +
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÉ‡∏´‡πâ Service Account ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ ENV ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            });
          }
        } else {
          // ‡πÅ‡∏Ñ‡πà task
          const r = created[0];
          await reply(ev.replyToken, {
            type: "text",
            text:
              `üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‚Ä¢ CODE: ${r.code}\n‚Ä¢ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${r.title}` +
              (r.due_at ? `\n‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${fmtDate(r.due_at)}` : ""),
          });
        }
      } catch (e: any) {
        console.error("AI_TASK_ERR", e);
        await reply(ev.replyToken, {
          type: "text",
          text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (AI) ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå help",
        });
      }
      continue;
    }

    // -----------------------------------------------------------------------
    // add <title> | desc=... | due=YYYY-MM-DD
    // -----------------------------------------------------------------------
    if (/^add\s+/i.test(text) || /^‡πÄ‡∏û‡∏¥‡πà‡∏°\s+/i.test(text)) {
      try {
        const m = text
          .replace(/^(add|‡πÄ‡∏û‡∏¥‡πà‡∏°)\s+/i, "")
          .match(
            /^(.*?)(?:\s*\|\s*desc=(.*?))?(?:\s*\|\s*due=(\d{4}-\d{2}-\d{2}))?\s*$/
          );

        if (!m) {
          await reply(ev.replyToken, {
            type: "text",
            text:
              "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\nadd ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô | desc=‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | due=2025-09-01",
          });
          continue;
        }

        const title = (m[1] || "").trim();
        const desc = m[2]?.trim() || null;
        const due = m[3]?.trim() || null;

        if (!title) {
          await reply(ev.replyToken, {
            type: "text",
            text:
              "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:\nadd ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ | desc=‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° | due=2025-09-01",
          });
          continue;
        }

        await sql/* sql */`
          insert into public.groups(id) values (${groupId})
          on conflict (id) do nothing`;

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ due= ‡πÉ‡∏ä‡πâ 00:00 ‡πÇ‡∏ã‡∏ô‡πÑ‡∏ó‡∏¢ ‚Üí RFC +07:00
        let dueIso: string | null = null;
        if (due) {
          const [yy, mm, dd] = due.split("-").map((n) => parseInt(n, 10));
          dueIso = rfcBkk(yy, mm, dd, 0, 0);
        }

        const gen4 = () =>
          Math.floor(Math.random() * 10000).toString().padStart(4, "0");

        let code = gen4();
        let created: any[] = [];
        for (let i = 0; i < 25; i++) {
          try {
            created = await sql/* sql */`
              insert into public.tasks (group_id, code, title, description, due_at)
              values (${groupId}, ${code}, ${title}, ${desc}, ${dueIso})
              returning code, title, due_at`;
            break;
          } catch (e: any) {
            const msg = String(e?.message ?? e);
            if (msg.includes("duplicate key")) {
              code = gen4();
              continue;
            }
            throw e;
          }
        }
        const r = created[0];
        await reply(ev.replyToken, {
          type: "text",
          text:
            `üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‚Ä¢ CODE: ${r.code}\n‚Ä¢ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${r.title}` +
            (r.due_at ? `\n‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${fmtDate(r.due_at)}` : ""),
        });
      } catch (e: any) {
        console.error("ADD_ERR", e);
        await reply(ev.replyToken, {
          type: "text",
          text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
        });
      }
      continue;
    }

    // -----------------------------------------------------------------------
    // list / list today
    // -----------------------------------------------------------------------
    if (/^list(\s+today)?$/i.test(text) || /^‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/i.test(text)) {
      const onlyToday = /today/i.test(text);
      const rows = onlyToday
        ? await sql/* sql */`
            select code, title, status, due_at, progress
            from public.tasks
            where group_id=${groupId}
              and date(timezone('Asia/Bangkok', due_at)) = date(timezone('Asia/Bangkok', now()))
            order by coalesce(due_at, now()+interval '10 years') asc
            limit 50`
        : await sql/* sql */`
            select code, title, status, due_at, progress
            from public.tasks
            where group_id=${groupId}
            order by coalesce(due_at, now()+interval '10 years') asc
            limit 50`;

      if (!rows.length) {
        await reply(ev.replyToken, {
          type: "text",
          text: onlyToday ? "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏±‡∏ö",
        });
        continue;
      }

      const body = rows
        .map(
          (r: any, i: number) =>
            `${i + 1}. [${r.status ?? "todo"}] ${r.title}` +
            (r.due_at ? `  (due: ${fmtDate(r.due_at)})` : "") +
            `\n   code=${r.code}  progress=${r.progress ?? 0}%`
        )
        .join("\n");

      await reply(ev.replyToken, {
        type: "text",
        text: `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô${onlyToday ? " (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)" : ""}\n` + body,
      });
      continue;
    }

    // -----------------------------------------------------------------------
    // progress <code> <‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠ +10/-5>
    // -----------------------------------------------------------------------
    if (
      text.toLowerCase().startsWith("progress ") ||
      text.toLowerCase().startsWith("update ") ||
      text.startsWith("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ")
    ) {
      try {
        const parts = text.trim().split(/\s+/);
        const key = parts[1]; // code 4 ‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ UUID
        let val = (parts[2] || "").replace(/%$/, "");

        if (!key || !val) {
          await reply(ev.replyToken, {
            type: "text",
            text:
              "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\nprogress 1234 50\nprogress 1234 +10\nprogress 1234 -5",
          });
          continue;
        }

        const found = await sql/* sql */`
          select id, code, progress, status
          from public.tasks
          where group_id=${groupId} and (code=${key} or id::text=${key})
          limit 1`;
        if (!found.length) {
          await reply(ev.replyToken, {
            type: "text",
            text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)",
          });
          continue;
        }
        const t = found[0];
        const cur = Number(t.progress ?? 0);

        const isDelta = /^[+-]/.test(val);
        const n = parseInt(val, 10);
        let next = isDelta ? cur + n : n;
        if (Number.isNaN(next)) next = cur;
        next = Math.max(0, Math.min(100, next));

        const nextStatus =
          next >= 100
            ? "done"
            : t.status === "todo" && next > 0
            ? "in_progress"
            : t.status;

        await sql/* sql */`
          update public.tasks
          set progress=${next},
              status=${nextStatus}::task_status,
              updated_at=now()
          where id=${t.id}`;

        await reply(ev.replyToken, {
          type: "text",
          text: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ [${t.code}] ${cur}% ‚Üí ${next}%${
            next === 100 ? " ‚úÖ (done)" : ""
          }`,
        });

        try {
          await sql/* sql */`
            insert into public.task_updates (task_id, actor_id, note, progress, new_status)
            values (${t.id}, ${ev.source.userId ?? null}, 'progress update via chat', ${next}, ${nextStatus}::task_status)`;
        } catch (e) {
          console.error("LOG_FAIL", e);
        }
      } catch (e: any) {
        console.error("PROGRESS_ERR", e);
        await reply(ev.replyToken, {
          type: "text",
          text: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        });
      }
      continue;
    }

    // -----------------------------------------------------------------------
    // done <code>
    // -----------------------------------------------------------------------
    if (/^done\s+/i.test(text) || /^‡πÄ‡∏™‡∏£‡πá‡∏à\s+/i.test(text)) {
      const key = text.replace(/^(done|‡πÄ‡∏™‡∏£‡πá‡∏à)\s+/i, "").trim();
      if (!key) {
        await reply(ev.replyToken, {
          type: "text",
          text: "‡∏û‡∏¥‡∏°‡∏û‡πå: done <code>\n‡πÄ‡∏ä‡πà‡∏ô: done 0123",
        });
        continue;
      }
      const updated = await sql/* sql */`
        update public.tasks
        set status='done', progress=100, updated_at=now()
        where group_id=${groupId}
          and (code=${key} or id::text=${key})
        returning code, title`;
      if (!updated.length) {
        await reply(ev.replyToken, {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)",
        });
        continue;
      }
      await reply(ev.replyToken, {
        type: "text",
        text: `‚úÖ ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${updated[0].title}\n(code=${updated[0].code})`,
      });
      continue;
    }

    // default ‚Üí help
    await reply(ev.replyToken, { type: "text", text: helpText(groupId) });
  }

  return new Response("ok", { status: 200 });
}
